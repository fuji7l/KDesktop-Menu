// This file is generated by kconfig_compiler from kickerSettings.kcfg.
// All changes you do to this file will be lost.

#include "kicker_settings.h"

#include <kstaticdeleter.h>

#include <kdebug.h>

class KickerSettingsPrivate
{
  public:

    // General
    bool locked;
    // menus
    int menuEntryFormat;
    bool showMenuTitles;
    int menuEntryHeight;
    bool showHiddenFiles;
    uint maxEntries2;
    bool useBookmarks;
    bool useBrowser;
    QStringList menuExtensions;
    QStringList recentAppsStat;
    uint numVisibleEntries;
    bool recentVsOften;


    // KMenu
    bool useSidePixmap;
    QString sidePixmapName;
    QString sideTileName;
    bool showKMenuText;
    QString kMenuText;


    // items
    KConfigSkeleton::ItemBool *itemLocked;
    KConfigSkeleton::ItemEnum *itemMenuEntryFormat;
    KConfigSkeleton::ItemBool *itemShowMenuTitles;
    KConfigSkeleton::ItemInt *itemMenuEntryHeight;
    KConfigSkeleton::ItemBool *itemShowHiddenFiles;
    KConfigSkeleton::ItemUInt *itemMaxEntries2;
    KConfigSkeleton::ItemBool *itemUseBookmarks;
    KConfigSkeleton::ItemBool *itemUseBrowser;
    KConfigSkeleton::ItemStringList *itemMenuExtensions;
    KConfigSkeleton::ItemStringList *itemRecentAppsStat;
    KConfigSkeleton::ItemUInt *itemNumVisibleEntries;
    KConfigSkeleton::ItemBool *itemRecentVsOften;
    KConfigSkeleton::ItemBool *itemUseSidePixmap;
    KConfigSkeleton::ItemString *itemSidePixmapName;
    KConfigSkeleton::ItemString *itemSideTileName;
    KConfigSkeleton::ItemBool *itemShowKMenuText;
    KConfigSkeleton::ItemString *itemKMenuText;
};

KickerSettings *KickerSettings::mSelf = 0;
static KStaticDeleter<KickerSettings> staticKickerSettingsDeleter;

KickerSettings *KickerSettings::self()
{
  if (!mSelf)
     kdFatal() << "you need to call KickerSettings::instance before using" << endl;
  return mSelf;
}

void KickerSettings::instance(const char *cfgfilename)
{
  if (mSelf) {
     kdError() << "KickerSettings::instance called after the first use - ignoring" << endl;
     return;
  }
  staticKickerSettingsDeleter.setObject( mSelf, new KickerSettings(cfgfilename) );
  mSelf->readConfig();
}

KickerSettings::KickerSettings(  const char *config  )
  : KConfigSkeleton( config )
{
  d = new KickerSettingsPrivate;
  mSelf = this;
  setCurrentGroup( QString::fromLatin1( "General" ) );

  d->itemLocked = new KConfigSkeleton::ItemBool( currentGroup(), QString::fromLatin1( "Locked" ), d->locked, false );
  addItem( d->itemLocked, QString::fromLatin1( "Locked" ) );

  setCurrentGroup( QString::fromLatin1( "menus" ) );

  QValueList<KConfigSkeleton::ItemEnum::Choice> valuesMenuEntryFormat;
  {
    KConfigSkeleton::ItemEnum::Choice choice;
    choice.name = QString::fromLatin1( "NameOnly" );
    valuesMenuEntryFormat.append( choice );
  }
  {
    KConfigSkeleton::ItemEnum::Choice choice;
    choice.name = QString::fromLatin1( "NameAndDescription" );
    valuesMenuEntryFormat.append( choice );
  }
  {
    KConfigSkeleton::ItemEnum::Choice choice;
    choice.name = QString::fromLatin1( "DescriptionOnly" );
    valuesMenuEntryFormat.append( choice );
  }
  {
    KConfigSkeleton::ItemEnum::Choice choice;
    choice.name = QString::fromLatin1( "DescriptionAndName" );
    valuesMenuEntryFormat.append( choice );
  }
  d->itemMenuEntryFormat = new KConfigSkeleton::ItemEnum( currentGroup(), QString::fromLatin1( "MenuEntryFormat" ), d->menuEntryFormat, valuesMenuEntryFormat, DescriptionAndName );
  addItem( d->itemMenuEntryFormat, QString::fromLatin1( "MenuEntryFormat" ) );
  d->itemShowMenuTitles = new KConfigSkeleton::ItemBool( currentGroup(), QString::fromLatin1( "ShowMenuTitles" ), d->showMenuTitles, true );
  addItem( d->itemShowMenuTitles, QString::fromLatin1( "ShowMenuTitles" ) );
  d->itemMenuEntryHeight = new KConfigSkeleton::ItemInt( currentGroup(), QString::fromLatin1( "MenuEntryHeight" ), d->menuEntryHeight, 0 );
  addItem( d->itemMenuEntryHeight, QString::fromLatin1( "MenuEntryHeight" ) );
  d->itemShowHiddenFiles = new KConfigSkeleton::ItemBool( currentGroup(), QString::fromLatin1( "ShowHiddenFiles" ), d->showHiddenFiles, false );
  addItem( d->itemShowHiddenFiles, QString::fromLatin1( "ShowHiddenFiles" ) );
  d->itemMaxEntries2 = new KConfigSkeleton::ItemUInt( currentGroup(), QString::fromLatin1( "MaxEntries2" ), d->maxEntries2, 30 );
  d->itemMaxEntries2->setMinValue(1);
  addItem( d->itemMaxEntries2, QString::fromLatin1( "MaxEntries2" ) );
  d->itemUseBookmarks = new KConfigSkeleton::ItemBool( currentGroup(), QString::fromLatin1( "UseBookmarks" ), d->useBookmarks, false );
  addItem( d->itemUseBookmarks, QString::fromLatin1( "UseBookmarks" ) );
  d->itemUseBrowser = new KConfigSkeleton::ItemBool( currentGroup(), QString::fromLatin1( "UseBrowser" ), d->useBrowser, false );
  addItem( d->itemUseBrowser, QString::fromLatin1( "UseBrowser" ) );
  QStringList defaultMenuExtensions;
  defaultMenuExtensions.append( QString::fromUtf8( "prefmenu.desktop" ) );
  defaultMenuExtensions.append( QString::fromUtf8( "systemmenu.desktop" ) );

  d->itemMenuExtensions = new KConfigSkeleton::ItemStringList( currentGroup(), QString::fromLatin1( "Extensions" ), d->menuExtensions, defaultMenuExtensions );
  addItem( d->itemMenuExtensions, QString::fromLatin1( "MenuExtensions" ) );
  d->itemRecentAppsStat = new KConfigSkeleton::ItemStringList( currentGroup(), QString::fromLatin1( "RecentAppsStat" ), d->recentAppsStat );
  addItem( d->itemRecentAppsStat, QString::fromLatin1( "RecentAppsStat" ) );
  d->itemNumVisibleEntries = new KConfigSkeleton::ItemUInt( currentGroup(), QString::fromLatin1( "NumVisibleEntries" ), d->numVisibleEntries, 5 );
  d->itemNumVisibleEntries->setMaxValue(100);
  addItem( d->itemNumVisibleEntries, QString::fromLatin1( "NumVisibleEntries" ) );
  d->itemRecentVsOften = new KConfigSkeleton::ItemBool( currentGroup(), QString::fromLatin1( "RecentVsOften" ), d->recentVsOften, false );
  addItem( d->itemRecentVsOften, QString::fromLatin1( "RecentVsOften" ) );


  setCurrentGroup( QString::fromLatin1( "KMenu" ) );

  d->itemUseSidePixmap = new KConfigSkeleton::ItemBool( currentGroup(), QString::fromLatin1( "UseSidePixmap" ), d->useSidePixmap, true );
  addItem( d->itemUseSidePixmap, QString::fromLatin1( "UseSidePixmap" ) );
  d->itemSidePixmapName = new KConfigSkeleton::ItemString( currentGroup(), QString::fromLatin1( "SideName" ), d->sidePixmapName, QString::fromLatin1( "kside.png" ) );
  addItem( d->itemSidePixmapName, QString::fromLatin1( "SidePixmapName" ) );
  d->itemSideTileName = new KConfigSkeleton::ItemString( currentGroup(), QString::fromLatin1( "SideTileName" ), d->sideTileName, QString::fromLatin1( "kside_tile.png" ) );
  addItem( d->itemSideTileName, QString::fromLatin1( "SideTileName" ) );
  d->itemShowKMenuText = new KConfigSkeleton::ItemBool( currentGroup(), QString::fromLatin1( "ShowText" ), d->showKMenuText, false );
  addItem( d->itemShowKMenuText, QString::fromLatin1( "ShowKMenuText" ) );
  d->itemKMenuText = new KConfigSkeleton::ItemString( currentGroup(), QString::fromLatin1( "Text" ), d->kMenuText, i18n("Applications") );
  addItem( d->itemKMenuText, QString::fromLatin1( "KMenuText" ) );
}


bool KickerSettings::locked()
{
  return self()->d->locked;
}


int KickerSettings::menuEntryFormat()
{
  return self()->d->menuEntryFormat;
}


bool KickerSettings::showMenuTitles()
{
  return self()->d->showMenuTitles;
}


int KickerSettings::menuEntryHeight()
{
  return self()->d->menuEntryHeight;
}



bool KickerSettings::showHiddenFiles()
{
  return self()->d->showHiddenFiles;
}


uint KickerSettings::maxEntries2()
{
  return self()->d->maxEntries2;
}


bool KickerSettings::useBookmarks()
{
  return self()->d->useBookmarks;
}


bool KickerSettings::useBrowser()
{
  return self()->d->useBrowser;
}

QStringList KickerSettings::menuExtensions()
{
  return self()->d->menuExtensions;
}


void KickerSettings::setRecentAppsStat( const QStringList & v )
{
      if (!self()->isImmutable( QString::fromLatin1( "RecentAppsStat" ) ))
        self()->d->recentAppsStat = v;
}

QStringList KickerSettings::recentAppsStat()
{
  return self()->d->recentAppsStat;
}



uint KickerSettings::numVisibleEntries()
{
  return self()->d->numVisibleEntries;
}


bool KickerSettings::recentVsOften()
{
  return self()->d->recentVsOften;
}



bool KickerSettings::useSidePixmap()
{
  return self()->d->useSidePixmap;
}


QString KickerSettings::sidePixmapName()
{
  return self()->d->sidePixmapName;
}


QString KickerSettings::sideTileName()
{
  return self()->d->sideTileName;
}


bool KickerSettings::showKMenuText()
{
  return self()->d->showKMenuText;
}



QString KickerSettings::kMenuText()
{
  return self()->d->kMenuText;
}



KickerSettings::~KickerSettings()
{
  delete d;
  if ( mSelf == this )
    staticKickerSettingsDeleter.setObject( mSelf, 0, false );
}





// #include "kicker_settings.h"
// #include <kapplication.h>
// #include <kstaticdeleter.h>
// #include <kdebug.h>
// #include <kdeversion.h>
// #include <klocale.h>
// KickerSettings *KickerSettings::mSelf = 0;
// static KStaticDeleter<KickerSettings> staticKickerSettingsDeleter;
// 
// KickerSettings *KickerSettings::self()
// {
// 	if (!mSelf)
// 	{
// 		kdFatal() << "KickerSettings::the must be called first" << endl;
// 	}
// 	return mSelf;
// }
// 
// void KickerSettings::the()
// {
// 	if (mSelf)
// 	{
// 		kdError() << "KickerSettings::the called after first use ignore"<<endl;
// 		return;
// 	}
// 	staticKickerSettingsDeleter.setObject( mSelf, new KickerSettings() );
// }
// 	
// KickerSettings::KickerSettings()
// {
// 	mSelf = this;
// 	kdDebug() << "MenuEntryFormat == " << endl;
// 
// 	KConfig cfg("kickerrc");
// 
// 	cfg.setGroup("General");
// 	mLocked         = cfg.readBoolEntry("Locked", false);
// 
// 	cfg.setGroup("menus");
// 
// 	mMenuEntryFormat = cfg.readEntry("MenuEntryFormat", descriptionAndName());
// 	mMenuEntryHeight = cfg.readNumEntry("MenuEntryHeight", 0);
// 	mUseBookmarks    = cfg.readBoolEntry("UseBookmarks", false);
// 	mUseBrowser      = cfg.readBoolEntry("UseBrowser", true);
// 	mShowMenuTitles  = cfg.readBoolEntry("ShowMenuTitles", true);
// 	mMenuExtensions  = cfg.readListEntry("MenuExtensions",
// 	                                     "prefmenu.desktop,systemmenu.desktop");
// 
// 	cfg.setGroup("KMenu");
// 	mUseSidePixmap   = cfg.readBoolEntry("UseSidePixmap", true);
// 	mSidePixmapName  = cfg.readEntry("SidePixmapName", "kside.png");
// 	mSideTileName    = cfg.readEntry("SideTileName", "kside_tile.png");
// 	mShowKMenuText   = cfg.readBoolEntry("ShowKMenuText", false);
// 	mKMenuText       = cfg.readEntry("KMenuText", i18n("Applications"));
// 
// 	// KDE 3.4 compat
// #if KDE_VERSION < 350
// 	kdDebug() << "KDE_VERSION " << KDE_VERSION << " < 350 " << endl;
// 	bool detailedMenuEntries = cfg.readBoolEntry("DetailedMenuEntries", true);
// 	bool detailedNamesFirst  = cfg.readBoolEntry("DetailedEntriesNamesFirst", true);
// 
// 	if (detailedMenuEntries == true)
// 	{
// 		mMenuEntryFormat = (detailedNamesFirst == true)
// 	                           ? "DescriptionAndName" : "NameAndDescription";
// 	}
// 	else
// 	{
// 		mMenuEntryFormat = (detailedNamesFirst == true)
// 	                           ? "DescriptionOnly" : "NameOnly";
// 	}
// #endif
// }
// 
// KickerSettings::~KickerSettings()
// {
// 	kdDebug() << "KickerSettings() destructor" <<endl;
// 	if ( mSelf == this )
// 		staticKickerSettingsDeleter.setObject( mSelf, 0, false );
// }


// // This file is generated by kconfig_compiler from kickerSettings.kcfg.
// // All changes you do to this file will be lost.
// 
// #include "kicker_settings.h"
// 
// #include <kapplication.h>
// #include <kstaticdeleter.h>
// 
// #include <kdebug.h>
// 
// KickerSettings *KickerSettings::mSelf = 0;
// static KStaticDeleter<KickerSettings> staticKickerSettingsDeleter;
// 
// KickerSettings *KickerSettings::self()
// {
//   if (!mSelf)
//      kdFatal() << "you need to call KickerSettings::instance before using" << endl;
//   return mSelf;
// }
// 
// void KickerSettings::instance(const char *cfgfilename)
// {
//   if (mSelf) {
//      kdError() << "KickerSettings::instance called after the first use - ignoring" << endl;
//      return;
//   }
//   staticKickerSettingsDeleter.setObject( mSelf, new KickerSettings(cfgfilename) );
//   mSelf->readConfig();
// }
// 
// KickerSettings::KickerSettings(  const char *config  )
//   : KConfigSkeleton( config )
// {
//   mSelf = this;
//   setCurrentGroup( QString::fromLatin1( "General" ) );
// 
//   KConfigSkeleton::ItemBool  *itemConserveSpace;
//   itemConserveSpace = new KConfigSkeleton::ItemBool( currentGroup(), QString::fromLatin1( "ConserveSpace" ), mConserveSpace, true );
//   addItem( itemConserveSpace, QString::fromLatin1( "ConserveSpace" ) );
//   KConfigSkeleton::ItemBool  *itemTransparent;
//   itemTransparent = new KConfigSkeleton::ItemBool( currentGroup(), QString::fromLatin1( "Transparent" ), mTransparent, false );
//   addItem( itemTransparent, QString::fromLatin1( "Transparent" ) );
//   KConfigSkeleton::ItemBool  *itemUseBackgroundTheme;
//   itemUseBackgroundTheme = new KConfigSkeleton::ItemBool( currentGroup(), QString::fromLatin1( "UseBackgroundTheme" ), mUseBackgroundTheme, true );
//   addItem( itemUseBackgroundTheme, QString::fromLatin1( "UseBackgroundTheme" ) );
//   KConfigSkeleton::ItemBool  *itemColorizeBackground;
//   itemColorizeBackground = new KConfigSkeleton::ItemBool( currentGroup(), QString::fromLatin1( "ColorizeBackground" ), mColorizeBackground, false );
//   addItem( itemColorizeBackground, QString::fromLatin1( "ColorizeBackground" ) );
//   KConfigSkeleton::ItemBool  *itemRotateBackground;
//   itemRotateBackground = new KConfigSkeleton::ItemBool( currentGroup(), QString::fromLatin1( "RotateBackground" ), mRotateBackground, true );
//   addItem( itemRotateBackground, QString::fromLatin1( "RotateBackground" ) );
//   KConfigSkeleton::ItemPath  *itemBackgroundTheme;
//   itemBackgroundTheme = new KConfigSkeleton::ItemPath( currentGroup(), QString::fromLatin1( "BackgroundTheme" ), mBackgroundTheme, QString::fromLatin1( "wallpapers/default.png" ) );
//   addItem( itemBackgroundTheme, QString::fromLatin1( "BackgroundTheme" ) );
//   KConfigSkeleton::ItemInt  *itemTintValue;
//   itemTintValue = new KConfigSkeleton::ItemInt( currentGroup(), QString::fromLatin1( "TintValue" ), mTintValue, 0 );
//   addItem( itemTintValue, QString::fromLatin1( "TintValue" ) );
//   KConfigSkeleton::ItemColor  *itemTintColor;
//   itemTintColor = new KConfigSkeleton::ItemColor( currentGroup(), QString::fromLatin1( "TintColor" ), mTintColor, (QApplication::palette().active().mid()) );
//   addItem( itemTintColor, QString::fromLatin1( "TintColor" ) );
//   KConfigSkeleton::ItemInt  *itemUnhideLocation;
//   itemUnhideLocation = new KConfigSkeleton::ItemInt( currentGroup(), QString::fromLatin1( "UnhideLocation" ), mUnhideLocation, 6 );
//   addItem( itemUnhideLocation, QString::fromLatin1( "UnhideLocation" ) );
//   KConfigSkeleton::ItemBool  *itemFadeOutAppletHandles;
//   itemFadeOutAppletHandles = new KConfigSkeleton::ItemBool( currentGroup(), QString::fromLatin1( "FadeOutAppletHandles" ), mFadeOutAppletHandles, false );
//   addItem( itemFadeOutAppletHandles, QString::fromLatin1( "FadeOutAppletHandles" ) );
//   KConfigSkeleton::ItemBool  *itemHideAppletHandles;
//   itemHideAppletHandles = new KConfigSkeleton::ItemBool( currentGroup(), QString::fromLatin1( "HideAppletHandles" ), mHideAppletHandles, false );
//   addItem( itemHideAppletHandles, QString::fromLatin1( "HideAppletHandles" ) );
//   KConfigSkeleton::ItemBool  *itemShowToolTips;
//   itemShowToolTips = new KConfigSkeleton::ItemBool( currentGroup(), QString::fromLatin1( "ShowToolTips" ), mShowToolTips, true );
//   addItem( itemShowToolTips, QString::fromLatin1( "ShowToolTips" ) );
//   KConfigSkeleton::ItemStringList  *itemUntrustedApplets;
//   itemUntrustedApplets = new KConfigSkeleton::ItemStringList( currentGroup(), QString::fromLatin1( "UntrustedApplets" ), mUntrustedApplets );
//   addItem( itemUntrustedApplets, QString::fromLatin1( "UntrustedApplets" ) );
//   KConfigSkeleton::ItemStringList  *itemUntrustedExtensions;
//   itemUntrustedExtensions = new KConfigSkeleton::ItemStringList( currentGroup(), QString::fromLatin1( "UntrustedExtensions" ), mUntrustedExtensions );
//   addItem( itemUntrustedExtensions, QString::fromLatin1( "UntrustedExtensions" ) );
// 
//   setCurrentGroup( QString::fromLatin1( "menus" ) );
// 
//   KConfigSkeleton::ItemBool  *itemDetailedMenuEntries;
//   itemDetailedMenuEntries = new KConfigSkeleton::ItemBool( currentGroup(), QString::fromLatin1( "DetailedMenuEntries" ), mDetailedMenuEntries, true );
//   addItem( itemDetailedMenuEntries, QString::fromLatin1( "DetailedMenuEntries" ) );
//   KConfigSkeleton::ItemBool  *itemDetailedEntriesNamesFirst;
//   itemDetailedEntriesNamesFirst = new KConfigSkeleton::ItemBool( currentGroup(), QString::fromLatin1( "DetailedEntriesNamesFirst" ), mDetailedEntriesNamesFirst, true );
//   addItem( itemDetailedEntriesNamesFirst, QString::fromLatin1( "DetailedEntriesNamesFirst" ) );
//   KConfigSkeleton::ItemBool  *itemShowMenuTitles;
//   itemShowMenuTitles = new KConfigSkeleton::ItemBool( currentGroup(), QString::fromLatin1( "ShowMenuTitles" ), mShowMenuTitles, true );
//   addItem( itemShowMenuTitles, QString::fromLatin1( "ShowMenuTitles" ) );
//   KConfigSkeleton::ItemInt  *itemMenuEntryHeight;
//   itemMenuEntryHeight = new KConfigSkeleton::ItemInt( currentGroup(), QString::fromLatin1( "MenuEntryHeight" ), mMenuEntryHeight, 0 );
//   addItem( itemMenuEntryHeight, QString::fromLatin1( "MenuEntryHeight" ) );
//   KConfigSkeleton::ItemBool  *itemShowHiddenFiles;
//   itemShowHiddenFiles = new KConfigSkeleton::ItemBool( currentGroup(), QString::fromLatin1( "ShowHiddenFiles" ), mShowHiddenFiles, false );
//   addItem( itemShowHiddenFiles, QString::fromLatin1( "ShowHiddenFiles" ) );
//   KConfigSkeleton::ItemInt  *itemMaxEntries2;
//   itemMaxEntries2 = new KConfigSkeleton::ItemInt( currentGroup(), QString::fromLatin1( "MaxEntries2" ), mMaxEntries2, 30 );
//   addItem( itemMaxEntries2, QString::fromLatin1( "MaxEntries2" ) );
//   KConfigSkeleton::ItemBool  *itemUseBookmarks;
//   itemUseBookmarks = new KConfigSkeleton::ItemBool( currentGroup(), QString::fromLatin1( "UseBookmarks" ), mUseBookmarks, true );
//   addItem( itemUseBookmarks, QString::fromLatin1( "UseBookmarks" ) );
//   KConfigSkeleton::ItemBool  *itemUseBrowser;
//   itemUseBrowser = new KConfigSkeleton::ItemBool( currentGroup(), QString::fromLatin1( "UseBrowser" ), mUseBrowser, true );
//   addItem( itemUseBrowser, QString::fromLatin1( "UseBrowser" ) );
//   KConfigSkeleton::ItemStringList  *itemMenuExtensions;
//   itemMenuExtensions = new KConfigSkeleton::ItemStringList( currentGroup(), QString::fromLatin1( "Extensions" ), mMenuExtensions );
//   addItem( itemMenuExtensions, QString::fromLatin1( "MenuExtensions" ) );
//   KConfigSkeleton::ItemStringList  *itemRecentAppsStat;
//   itemRecentAppsStat = new KConfigSkeleton::ItemStringList( currentGroup(), QString::fromLatin1( "RecentAppsStat" ), mRecentAppsStat );
//   addItem( itemRecentAppsStat, QString::fromLatin1( "RecentAppsStat" ) );
//   KConfigSkeleton::ItemInt  *itemNumVisibleEntries;
//   itemNumVisibleEntries = new KConfigSkeleton::ItemInt( currentGroup(), QString::fromLatin1( "NumVisibleEntries" ), mNumVisibleEntries, 5 );
//   addItem( itemNumVisibleEntries, QString::fromLatin1( "NumVisibleEntries" ) );
//   KConfigSkeleton::ItemBool  *itemRecentVsOften;
//   itemRecentVsOften = new KConfigSkeleton::ItemBool( currentGroup(), QString::fromLatin1( "RecentVsOften" ), mRecentVsOften, false );
//   addItem( itemRecentVsOften, QString::fromLatin1( "RecentVsOften" ) );
// 
//   setCurrentGroup( QString::fromLatin1( "button_tiles" ) );
// 
//   KConfigSkeleton::ItemBool  *itemEnableKMenuTiles;
//   itemEnableKMenuTiles = new KConfigSkeleton::ItemBool( currentGroup(), QString::fromLatin1( "EnableKMenuTiles" ), mEnableKMenuTiles, false );
//   addItem( itemEnableKMenuTiles, QString::fromLatin1( "EnableKMenuTiles" ) );
//   KConfigSkeleton::ItemBool  *itemEnableDesktopButtonTiles;
//   itemEnableDesktopButtonTiles = new KConfigSkeleton::ItemBool( currentGroup(), QString::fromLatin1( "EnableDesktopButtonTiles" ), mEnableDesktopButtonTiles, false );
//   addItem( itemEnableDesktopButtonTiles, QString::fromLatin1( "EnableDesktopButtonTiles" ) );
//   KConfigSkeleton::ItemBool  *itemEnableURLTiles;
//   itemEnableURLTiles = new KConfigSkeleton::ItemBool( currentGroup(), QString::fromLatin1( "EnableURLTiles" ), mEnableURLTiles, false );
//   addItem( itemEnableURLTiles, QString::fromLatin1( "EnableURLTiles" ) );
//   KConfigSkeleton::ItemBool  *itemEnableBrowserTiles;
//   itemEnableBrowserTiles = new KConfigSkeleton::ItemBool( currentGroup(), QString::fromLatin1( "EnableBrowserTiles" ), mEnableBrowserTiles, false );
//   addItem( itemEnableBrowserTiles, QString::fromLatin1( "EnableBrowserTiles" ) );
//   KConfigSkeleton::ItemBool  *itemEnableWindowListTiles;
//   itemEnableWindowListTiles = new KConfigSkeleton::ItemBool( currentGroup(), QString::fromLatin1( "EnableWindowListTiles" ), mEnableWindowListTiles, false );
//   addItem( itemEnableWindowListTiles, QString::fromLatin1( "EnableWindowListTiles" ) );
//   KConfigSkeleton::ItemPath  *itemKMenuTile;
//   itemKMenuTile = new KConfigSkeleton::ItemPath( currentGroup(), QString::fromLatin1( "KMenuTile" ), mKMenuTile );
//   addItem( itemKMenuTile, QString::fromLatin1( "KMenuTile" ) );
//   KConfigSkeleton::ItemColor  *itemKMenuTileColor;
//   itemKMenuTileColor = new KConfigSkeleton::ItemColor( currentGroup(), QString::fromLatin1( "KMenuTileColor" ), mKMenuTileColor );
//   addItem( itemKMenuTileColor, QString::fromLatin1( "KMenuTileColor" ) );
//   KConfigSkeleton::ItemPath  *itemDesktopButtonTile;
//   itemDesktopButtonTile = new KConfigSkeleton::ItemPath( currentGroup(), QString::fromLatin1( "DesktopButtonTile" ), mDesktopButtonTile );
//   addItem( itemDesktopButtonTile, QString::fromLatin1( "DesktopButtonTile" ) );
//   KConfigSkeleton::ItemColor  *itemDesktopButtonTileColor;
//   itemDesktopButtonTileColor = new KConfigSkeleton::ItemColor( currentGroup(), QString::fromLatin1( "DesktopButtonTileColor" ), mDesktopButtonTileColor );
//   addItem( itemDesktopButtonTileColor, QString::fromLatin1( "DesktopButtonTileColor" ) );
//   KConfigSkeleton::ItemPath  *itemURLTile;
//   itemURLTile = new KConfigSkeleton::ItemPath( currentGroup(), QString::fromLatin1( "URLTile" ), mURLTile );
//   addItem( itemURLTile, QString::fromLatin1( "URLTile" ) );
//   KConfigSkeleton::ItemColor  *itemURLTileColor;
//   itemURLTileColor = new KConfigSkeleton::ItemColor( currentGroup(), QString::fromLatin1( "URLTileColor" ), mURLTileColor );
//   addItem( itemURLTileColor, QString::fromLatin1( "URLTileColor" ) );
//   KConfigSkeleton::ItemPath  *itemBrowserTile;
//   itemBrowserTile = new KConfigSkeleton::ItemPath( currentGroup(), QString::fromLatin1( "BrowserTile" ), mBrowserTile );
//   addItem( itemBrowserTile, QString::fromLatin1( "BrowserTile" ) );
//   KConfigSkeleton::ItemColor  *itemBrowserTileColor;
//   itemBrowserTileColor = new KConfigSkeleton::ItemColor( currentGroup(), QString::fromLatin1( "BrowserTileColor" ), mBrowserTileColor );
//   addItem( itemBrowserTileColor, QString::fromLatin1( "BrowserTileColor" ) );
// 
//   setCurrentGroup( QString::fromLatin1( "KMenu" ) );
// 
//   KConfigSkeleton::ItemBool  *itemUseSidePixmap;
//   itemUseSidePixmap = new KConfigSkeleton::ItemBool( currentGroup(), QString::fromLatin1( "UseSidePixmap" ), mUseSidePixmap, true );
//   addItem( itemUseSidePixmap, QString::fromLatin1( "UseSidePixmap" ) );
//   KConfigSkeleton::ItemString  *itemSidePixmapName;
//   itemSidePixmapName = new KConfigSkeleton::ItemString( currentGroup(), QString::fromLatin1( "SideName" ), mSidePixmapName, QString::fromLatin1( "kside.png" ) );
//   addItem( itemSidePixmapName, QString::fromLatin1( "SidePixmapName" ) );
//   KConfigSkeleton::ItemString  *itemSideTileName;
//   itemSideTileName = new KConfigSkeleton::ItemString( currentGroup(), QString::fromLatin1( "SideTileName" ), mSideTileName, QString::fromLatin1( "kside_tile.png" ) );
//   addItem( itemSideTileName, QString::fromLatin1( "SideTileName" ) );
// 
//   setCurrentGroup( QString::fromLatin1( "buttons" ) );
// 
//   KConfigSkeleton::ItemBool  *itemShowMouseOverEffects;
//   itemShowMouseOverEffects = new KConfigSkeleton::ItemBool( currentGroup(), QString::fromLatin1( "EnableIconZoom" ), mShowMouseOverEffects, true );
//   addItem( itemShowMouseOverEffects, QString::fromLatin1( "ShowMouseOverEffects" ) );
//   KConfigSkeleton::ItemBool  *itemEnableTileBackground;
//   itemEnableTileBackground = new KConfigSkeleton::ItemBool( currentGroup(), QString::fromLatin1( "EnableTileBackground" ), mEnableTileBackground, false );
//   addItem( itemEnableTileBackground, QString::fromLatin1( "EnableTileBackground" ) );
// }
// 
// KickerSettings::~KickerSettings()
// {
//     kdDebug() << "KickerSettings() destructor" <<endl;
//   if ( mSelf == this )
//     staticKickerSettingsDeleter.setObject( mSelf, 0, false );
// }
// 
