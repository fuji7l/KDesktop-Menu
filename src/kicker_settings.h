// This file is generated by kconfig_compiler from kickerSettings.kcfg.
// All changes you do to this file will be lost.
#ifndef KICKERSETTINGS_H
#define KICKERSETTINGS_H

#include <qapplication.h>

#include <kconfigskeleton.h>
#include <kdebug.h>

#include <kapplication.h>
#include <klocale.h>
class KickerSettingsPrivate;

class KDE_EXPORT KickerSettings : public KConfigSkeleton
{
  public:
    enum { NameOnly, NameAndDescription, DescriptionOnly, DescriptionAndName };

    static KickerSettings *self();
    static void instance(const char * cfgfilename);
    ~KickerSettings();

    /**
      Get When this option is enabled, the panels may not be moved and items cannot be removed or added
    */
    static
    bool locked();


    /**
      Get Formation of the menu entry text
    */
    static
    int menuEntryFormat();

    /**
      Get Show section titles in Kmenu
    */
    static
    bool showMenuTitles();


    /**
      Get Height of menu entries in pixels
    */
    static
    int menuEntryHeight();

    /**
      Get Show hidden files in Quick Browser
    */
    static
    bool showHiddenFiles();


    /**
      Get Maximum number of entries
    */
    static
    uint maxEntries2();


    /**
      Get Show bookmarks in KMenu
    */
    static
    bool useBookmarks();

    /**
      Get Use the Quick Browser
    */
    static
    bool useBrowser();

    /**
      Get Optional Menus
    */
    static
    QStringList menuExtensions();

    /**
      Set Recently used applications
    */
    static
    void setRecentAppsStat( const QStringList & v );

    /**
      Get Recently used applications
    */
    static
    QStringList recentAppsStat();


    /**
      Get Number of visible entries
    */
    static
    uint numVisibleEntries();

    /**
      Get Show most recently used applications rather than most frequently used
    */
    static
    bool recentVsOften();


    /**
      Get Use side image in Kmenu
    */
    static
    bool useSidePixmap();


    /**
      Get The name of the file to use as the side image in the K Menu
    */
    static
    QString sidePixmapName();

    /**
      Get The name of the file used as a tile to fill the height of K Menu that SidePixmapName does not cover
    */
    static
    QString sideTileName();

    /**
      Get Show text on the K Menu button
    */
    static
    bool showKMenuText();

    /**
      Get Text to be shown on K Menu Button
    */
    static
    QString kMenuText();


    static
    void writeConfig()
    {
      static_cast<KConfigSkeleton*>(self())->writeConfig();
    }
  protected:
    KickerSettings(const char *arg);
    static KickerSettings *mSelf;

  private:
    KickerSettingsPrivate *d;
};

#endif















// #ifndef KICKERSETTINGS_H
// #define KICKERSETTINGS_H
// 
// #include <kconfig.h>
// 
// class KickerSettings
// {
// 	Q_OBJECT
// 	
// 	public:
// 		static KickerSettings *self();
// 		static void the();
// 		~KickerSettings();
// 
// 		static QString nameOnly()
// 		{
// 			return QString("NameOnly");
// 		}
// 		static QString nameAndDescription()
// 		{
// 			return QString("NameAndDescription");
// 		}
// 		static QString descriptionOnly()
// 		{
// 			return QString("DescriptionOnly");
// 		}
// 		static QString descriptionAndName()
// 		{
// 			return QString("DescriptionAndName");
// 		}
// 
// 		// general
// 
// 		static bool locked()
// 		{
// 			return self()->mLocked;
// 		}
// 
// 		//menu
// 
// 		static QString menuEntryFormat()
// 		{
// 			return self()->mMenuEntryFormat;
// 		}
// 
// 		static int menuEntryHeight()
// 		{
// 			return self()->mMenuEntryHeight;
// 		}
// 
// 		static QStringList menuExtensions()
// 		{
// 			return self()->mMenuExtensions;
// 		}
// 
// 		static QStringList recentAppsStat()
// 		{
// 			return self()->mRecentAppsStat;
// 		}
// 
// 		static bool showMenuTitles()
// 		{
// 			return self()->mShowMenuTitles;
// 		}
// 
// 		static bool useBookmarks()
// 		{
// 			return self()->mUseBookmarks;
// 		}
// 
// 		static bool useBrowser()
// 		{
// 			return self()->mUseBrowser;
// 		}
// 
// 
// 		// Kmenu
// 
// 		static bool useSidePixmap()
// 		{
// 			return self()->mUseSidePixmap;
// 		}
// 
// 		static QString sidePixmapName()
// 		{
// 			return self()->mSidePixmapName;
// 		}
// 
// 		static QString sideTileName()
// 		{
// 			return self()->mSideTileName;
// 		}
// 
// 		static bool showKMenuText()
// 		{
// 			return self()->mShowKMenuText;
// 		}
// 
// 		static QString kmenuText()
// 		{
// 			return self()->mKMenuText;
// 		}
// 
// 
// 
// 	protected:
// 		KickerSettings();
// 		static KickerSettings *mSelf;
// 
// 
// 		// General
// 		bool		mLocked;
// 	
// 		// menus
// 
// 		QString			mMenuEntryFormat;
// 		int				mMenuEntryHeight;
// 		QStringList		mMenuExtensions;
// 		QStringList		mRecentAppsStat;
// 		bool			mShowMenuTitles;
// 		bool			mUseBookmarks;
// 		bool			mUseBrowser;
// 
// 		// KMenu
// 		bool			mUseSidePixmap;
// 		QString			mSidePixmapName;
// 		QString			mSideTileName;
// 		bool			mShowKMenuText;
// 		QString			mKMenuText;
// 
// 	private:
// };
// 
// #endif

// 
// #include <qapplication.h>
// 
// #include <kconfigskeleton.h>
// 
// class KDE_EXPORT KickerSettings : public KConfigSkeleton
// {
//   public:
// 
//     static KickerSettings *self();
//     static void instance(const char * cfgfilename);
//     ~KickerSettings();
// 
//     /**
//       Set Enable conserve space
//     */
//     static
//     void setConserveSpace( bool v )
//     {
//       if (!self()->isImmutable( QString::fromLatin1( "ConserveSpace" ) ))
//         self()->mConserveSpace = v;
//     }
// 
//     /**
//       Get Enable conserve space
//     */
//     static
//     bool conserveSpace()
//     {
//       return self()->mConserveSpace;
//     }
// 
//     /**
//       Set Enable transparency
//     */
//     static
//     void setTransparent( bool v )
//     {
//       if (!self()->isImmutable( QString::fromLatin1( "Transparent" ) ))
//         self()->mTransparent = v;
//     }
// 
//     /**
//       Get Enable transparency
//     */
//     static
//     bool transparent()
//     {
//       return self()->mTransparent;
//     }
// 
//     /**
//       Set Use background image
//     */
//     static
//     void setUseBackgroundTheme( bool v )
//     {
//       if (!self()->isImmutable( QString::fromLatin1( "UseBackgroundTheme" ) ))
//         self()->mUseBackgroundTheme = v;
//     }
// 
//     /**
//       Get Use background image
//     */
//     static
//     bool useBackgroundTheme()
//     {
//       return self()->mUseBackgroundTheme;
//     }
// 
//     /**
//       Set Enable colourized background.
//     */
//     static
//     void setColorizeBackground( bool v )
//     {
//       if (!self()->isImmutable( QString::fromLatin1( "ColorizeBackground" ) ))
//         self()->mColorizeBackground = v;
//     }
// 
//     /**
//       Get Enable colourized background.
//     */
//     static
//     bool colorizeBackground()
//     {
//       return self()->mColorizeBackground;
//     }
// 
//     /**
//       Set Roate background
//     */
//     static
//     void setRotateBackground( bool v )
//     {
//       if (!self()->isImmutable( QString::fromLatin1( "RotateBackground" ) ))
//         self()->mRotateBackground = v;
//     }
// 
//     /**
//       Get Roate background
//     */
//     static
//     bool rotateBackground()
//     {
//       return self()->mRotateBackground;
//     }
// 
//     /**
//       Set Background image
//     */
//     static
//     void setBackgroundTheme( const QString & v )
//     {
//       if (!self()->isImmutable( QString::fromLatin1( "BackgroundTheme" ) ))
//         self()->mBackgroundTheme = v;
//     }
// 
//     /**
//       Get Background image
//     */
//     static
//     QString backgroundTheme()
//     {
//       return self()->mBackgroundTheme;
//     }
// 
//     /**
//       Set Tint amount
//     */
//     static
//     void setTintValue( int v )
//     {
//       if (!self()->isImmutable( QString::fromLatin1( "TintValue" ) ))
//         self()->mTintValue = v;
//     }
// 
//     /**
//       Get Tint amount
//     */
//     static
//     int tintValue()
//     {
//       return self()->mTintValue;
//     }
// 
//     /**
//       Set Tint Color
//     */
//     static
//     void setTintColor( const QColor & v )
//     {
//       if (!self()->isImmutable( QString::fromLatin1( "TintColor" ) ))
//         self()->mTintColor = v;
//     }
// 
//     /**
//       Get Tint Color
//     */
//     static
//     QColor tintColor()
//     {
//       return self()->mTintColor;
//     }
// 
//     /**
//       Set Raise when the pointer touches the screen here
//     */
//     static
//     void setUnhideLocation( int v )
//     {
//       if (!self()->isImmutable( QString::fromLatin1( "UnhideLocation" ) ))
//         self()->mUnhideLocation = v;
//     }
// 
//     /**
//       Get Raise when the pointer touches the screen here
//     */
//     static
//     int unhideLocation()
//     {
//       return self()->mUnhideLocation;
//     }
// 
//     /**
//       Set Fade out applet handles
//     */
//     static
//     void setFadeOutAppletHandles( bool v )
//     {
//       if (!self()->isImmutable( QString::fromLatin1( "FadeOutAppletHandles" ) ))
//         self()->mFadeOutAppletHandles = v;
//     }
// 
//     /**
//       Get Fade out applet handles
//     */
//     static
//     bool fadeOutAppletHandles()
//     {
//       return self()->mFadeOutAppletHandles;
//     }
// 
//     /**
//       Set Hide applet handles
//     */
//     static
//     void setHideAppletHandles( bool v )
//     {
//       if (!self()->isImmutable( QString::fromLatin1( "HideAppletHandles" ) ))
//         self()->mHideAppletHandles = v;
//     }
// 
//     /**
//       Get Hide applet handles
//     */
//     static
//     bool hideAppletHandles()
//     {
//       return self()->mHideAppletHandles;
//     }
// 
//     /**
//       Set Show informational tooltips
//     */
//     static
//     void setShowToolTips( bool v )
//     {
//       if (!self()->isImmutable( QString::fromLatin1( "ShowToolTips" ) ))
//         self()->mShowToolTips = v;
//     }
// 
//     /**
//       Get Show informational tooltips
//     */
//     static
//     bool showToolTips()
//     {
//       return self()->mShowToolTips;
//     }
// 
//     /**
//       Set A list of applets that have been loaded at runtime. In the case of a crash these applets will not be loaded at the next kicker start incase they caused the crash
//     */
//     static
//     void setUntrustedApplets( const QStringList & v )
//     {
//       if (!self()->isImmutable( QString::fromLatin1( "UntrustedApplets" ) ))
//         self()->mUntrustedApplets = v;
//     }
// 
//     /**
//       Get A list of applets that have been loaded at runtime. In the case of a crash these applets will not be loaded at the next kicker start incase they caused the crash
//     */
//     static
//     QStringList untrustedApplets()
//     {
//       return self()->mUntrustedApplets;
//     }
// 
//     /**
//       Set A list of extensions that have been loaded at runtime. In the case of a crash these extensions will not be loaded at the next kicker start incase they caused the crash
//     */
//     static
//     void setUntrustedExtensions( const QStringList & v )
//     {
//       if (!self()->isImmutable( QString::fromLatin1( "UntrustedExtensions" ) ))
//         self()->mUntrustedExtensions = v;
//     }
// 
//     /**
//       Get A list of extensions that have been loaded at runtime. In the case of a crash these extensions will not be loaded at the next kicker start incase they caused the crash
//     */
//     static
//     QStringList untrustedExtensions()
//     {
//       return self()->mUntrustedExtensions;
//     }
// 
//     /**
//       Set Show detailed menu entries
//     */
//     static
//     void setDetailedMenuEntries( bool v )
//     {
//       if (!self()->isImmutable( QString::fromLatin1( "DetailedMenuEntries" ) ))
//         self()->mDetailedMenuEntries = v;
//     }
// 
//     /**
//       Get Show detailed menu entries
//     */
//     static
//     bool detailedMenuEntries()
//     {
//       return self()->mDetailedMenuEntries;
//     }
// 
//     /**
//       Set Show names first on detailed entries
//     */
//     static
//     void setDetailedEntriesNamesFirst( bool v )
//     {
//       if (!self()->isImmutable( QString::fromLatin1( "DetailedEntriesNamesFirst" ) ))
//         self()->mDetailedEntriesNamesFirst = v;
//     }
// 
//     /**
//       Get Show names first on detailed entries
//     */
//     static
//     bool detailedEntriesNamesFirst()
//     {
//       return self()->mDetailedEntriesNamesFirst;
//     }
// 
//     /**
//       Set Show section titles in Kmenu
//     */
//     static
//     void setShowMenuTitles( bool v )
//     {
//       if (!self()->isImmutable( QString::fromLatin1( "ShowMenuTitles" ) ))
//         self()->mShowMenuTitles = v;
//     }
// 
//     /**
//       Get Show section titles in Kmenu
//     */
//     static
//     bool showMenuTitles()
//     {
//       return self()->mShowMenuTitles;
//     }
// 
//     /**
//       Set Height of menu entries in pixels
//     */
//     static
//     void setMenuEntryHeight( int v )
//     {
//       if (!self()->isImmutable( QString::fromLatin1( "MenuEntryHeight" ) ))
//         self()->mMenuEntryHeight = v;
//     }
// 
//     /**
//       Get Height of menu entries in pixels
//     */
//     static
//     int menuEntryHeight()
//     {
//       return self()->mMenuEntryHeight;
//     }
// 
//     /**
//       Set Show hidden files in Quick Browser
//     */
//     static
//     void setShowHiddenFiles( bool v )
//     {
//       if (!self()->isImmutable( QString::fromLatin1( "ShowHiddenFiles" ) ))
//         self()->mShowHiddenFiles = v;
//     }
// 
//     /**
//       Get Show hidden files in Quick Browser
//     */
//     static
//     bool showHiddenFiles()
//     {
//       return self()->mShowHiddenFiles;
//     }
// 
//     /**
//       Set Maximum number of entries
//     */
//     static
//     void setMaxEntries2( int v )
//     {
//       if (!self()->isImmutable( QString::fromLatin1( "MaxEntries2" ) ))
//         self()->mMaxEntries2 = v;
//     }
// 
//     /**
//       Get Maximum number of entries
//     */
//     static
//     int maxEntries2()
//     {
//       return self()->mMaxEntries2;
//     }
// 
//     /**
//       Set Show bookmarks in KMenu
//     */
//     static
//     void setUseBookmarks( bool v )
//     {
//       if (!self()->isImmutable( QString::fromLatin1( "UseBookmarks" ) ))
//         self()->mUseBookmarks = v;
//     }
// 
//     /**
//       Get Show bookmarks in KMenu
//     */
//     static
//     bool useBookmarks()
//     {
//       return self()->mUseBookmarks;
//     }
// 
//     /**
//       Set Use the Quick Browser
//     */
//     static
//     void setUseBrowser( bool v )
//     {
//       if (!self()->isImmutable( QString::fromLatin1( "UseBrowser" ) ))
//         self()->mUseBrowser = v;
//     }
// 
//     /**
//       Get Use the Quick Browser
//     */
//     static
//     bool useBrowser()
//     {
//       return self()->mUseBrowser;
//     }
// 
//     /**
//       Set Optional Menus
//     */
//     static
//     void setMenuExtensions( const QStringList & v )
//     {
//       if (!self()->isImmutable( QString::fromLatin1( "MenuExtensions" ) ))
//         self()->mMenuExtensions = v;
//     }
// 
//     /**
//       Get Optional Menus
//     */
//     static
//     QStringList menuExtensions()
//     {
//       return self()->mMenuExtensions;
//     }
// 
//     /**
//       Set Recently used applications
//     */
//     static
//     void setRecentAppsStat( const QStringList & v )
//     {
//       if (!self()->isImmutable( QString::fromLatin1( "RecentAppsStat" ) ))
//         self()->mRecentAppsStat = v;
//     }
// 
//     /**
//       Get Recently used applications
//     */
//     static
//     QStringList recentAppsStat()
//     {
//       return self()->mRecentAppsStat;
//     }
// 
//     /**
//       Set Number of visible entries
//     */
//     static
//     void setNumVisibleEntries( int v )
//     {
//       if (!self()->isImmutable( QString::fromLatin1( "NumVisibleEntries" ) ))
//         self()->mNumVisibleEntries = v;
//     }
// 
//     /**
//       Get Number of visible entries
//     */
//     static
//     int numVisibleEntries()
//     {
//       return self()->mNumVisibleEntries;
//     }
// 
//     /**
//       Set Show most recently used applications rather than most frequently used
//     */
//     static
//     void setRecentVsOften( bool v )
//     {
//       if (!self()->isImmutable( QString::fromLatin1( "RecentVsOften" ) ))
//         self()->mRecentVsOften = v;
//     }
// 
//     /**
//       Get Show most recently used applications rather than most frequently used
//     */
//     static
//     bool recentVsOften()
//     {
//       return self()->mRecentVsOften;
//     }
// 
//     /**
//       Set Enable a tile background image for the KMenu button
//     */
//     static
//     void setEnableKMenuTiles( bool v )
//     {
//       if (!self()->isImmutable( QString::fromLatin1( "EnableKMenuTiles" ) ))
//         self()->mEnableKMenuTiles = v;
//     }
// 
//     /**
//       Get Enable a tile background image for the KMenu button
//     */
//     static
//     bool enableKMenuTiles()
//     {
//       return self()->mEnableKMenuTiles;
//     }
// 
//     /**
//       Set Enable a tile background image for the Desktop button
//     */
//     static
//     void setEnableDesktopButtonTiles( bool v )
//     {
//       if (!self()->isImmutable( QString::fromLatin1( "EnableDesktopButtonTiles" ) ))
//         self()->mEnableDesktopButtonTiles = v;
//     }
// 
//     /**
//       Get Enable a tile background image for the Desktop button
//     */
//     static
//     bool enableDesktopButtonTiles()
//     {
//       return self()->mEnableDesktopButtonTiles;
//     }
// 
//     /**
//       Set Enable a tile background image for Application, URL and special buttons
//     */
//     static
//     void setEnableURLTiles( bool v )
//     {
//       if (!self()->isImmutable( QString::fromLatin1( "EnableURLTiles" ) ))
//         self()->mEnableURLTiles = v;
//     }
// 
//     /**
//       Get Enable a tile background image for Application, URL and special buttons
//     */
//     static
//     bool enableURLTiles()
//     {
//       return self()->mEnableURLTiles;
//     }
// 
//     /**
//       Set Enable a tile background image for the Quick Browser button
//     */
//     static
//     void setEnableBrowserTiles( bool v )
//     {
//       if (!self()->isImmutable( QString::fromLatin1( "EnableBrowserTiles" ) ))
//         self()->mEnableBrowserTiles = v;
//     }
// 
//     /**
//       Get Enable a tile background image for the Quick Browser button
//     */
//     static
//     bool enableBrowserTiles()
//     {
//       return self()->mEnableBrowserTiles;
//     }
// 
//     /**
//       Set Enable a tile background image for the Window List button
//     */
//     static
//     void setEnableWindowListTiles( bool v )
//     {
//       if (!self()->isImmutable( QString::fromLatin1( "EnableWindowListTiles" ) ))
//         self()->mEnableWindowListTiles = v;
//     }
// 
//     /**
//       Get Enable a tile background image for the Window List button
//     */
//     static
//     bool enableWindowListTiles()
//     {
//       return self()->mEnableWindowListTiles;
//     }
// 
//     /**
//       Set Image tile for Kmenu button background
//     */
//     static
//     void setKMenuTile( const QString & v )
//     {
//       if (!self()->isImmutable( QString::fromLatin1( "KMenuTile" ) ))
//         self()->mKMenuTile = v;
//     }
// 
//     /**
//       Get Image tile for Kmenu button background
//     */
//     static
//     QString kMenuTile()
//     {
//       return self()->mKMenuTile;
//     }
// 
//     /**
//       Set Color to use for Kmenu button background
//     */
//     static
//     void setKMenuTileColor( const QColor & v )
//     {
//       if (!self()->isImmutable( QString::fromLatin1( "KMenuTileColor" ) ))
//         self()->mKMenuTileColor = v;
//     }
// 
//     /**
//       Get Color to use for Kmenu button background
//     */
//     static
//     QColor kMenuTileColor()
//     {
//       return self()->mKMenuTileColor;
//     }
// 
//     /**
//       Set Image tile for Desktop button background
//     */
//     static
//     void setDesktopButtonTile( const QString & v )
//     {
//       if (!self()->isImmutable( QString::fromLatin1( "DesktopButtonTile" ) ))
//         self()->mDesktopButtonTile = v;
//     }
// 
//     /**
//       Get Image tile for Desktop button background
//     */
//     static
//     QString desktopButtonTile()
//     {
//       return self()->mDesktopButtonTile;
//     }
// 
//     /**
//       Set Color to use for Kmenu button background
//     */
//     static
//     void setDesktopButtonTileColor( const QColor & v )
//     {
//       if (!self()->isImmutable( QString::fromLatin1( "DesktopButtonTileColor" ) ))
//         self()->mDesktopButtonTileColor = v;
//     }
// 
//     /**
//       Get Color to use for Kmenu button background
//     */
//     static
//     QColor desktopButtonTileColor()
//     {
//       return self()->mDesktopButtonTileColor;
//     }
// 
//     /**
//       Set Image tile for Application, URL and special button backgrounds
//     */
//     static
//     void setURLTile( const QString & v )
//     {
//       if (!self()->isImmutable( QString::fromLatin1( "URLTile" ) ))
//         self()->mURLTile = v;
//     }
// 
//     /**
//       Get Image tile for Application, URL and special button backgrounds
//     */
//     static
//     QString uRLTile()
//     {
//       return self()->mURLTile;
//     }
// 
//     /**
//       Set Color to use for Application, URL and special button backgrounds
//     */
//     static
//     void setURLTileColor( const QColor & v )
//     {
//       if (!self()->isImmutable( QString::fromLatin1( "URLTileColor" ) ))
//         self()->mURLTileColor = v;
//     }
// 
//     /**
//       Get Color to use for Application, URL and special button backgrounds
//     */
//     static
//     QColor uRLTileColor()
//     {
//       return self()->mURLTileColor;
//     }
// 
//     /**
//       Set Image tile for Browser button background
//     */
//     static
//     void setBrowserTile( const QString & v )
//     {
//       if (!self()->isImmutable( QString::fromLatin1( "BrowserTile" ) ))
//         self()->mBrowserTile = v;
//     }
// 
//     /**
//       Get Image tile for Browser button background
//     */
//     static
//     QString browserTile()
//     {
//       return self()->mBrowserTile;
//     }
// 
//     /**
//       Set Color to use for Browser button background
//     */
//     static
//     void setBrowserTileColor( const QColor & v )
//     {
//       if (!self()->isImmutable( QString::fromLatin1( "BrowserTileColor" ) ))
//         self()->mBrowserTileColor = v;
//     }
// 
//     /**
//       Get Color to use for Browser button background
//     */
//     static
//     QColor browserTileColor()
//     {
//       return self()->mBrowserTileColor;
//     }
// 
//     /**
//       Set Use side image in Kmenu
//     */
//     static
//     void setUseSidePixmap( bool v )
//     {
//       if (!self()->isImmutable( QString::fromLatin1( "UseSidePixmap" ) ))
//         self()->mUseSidePixmap = v;
//     }
// 
//     /**
//       Get Use side image in Kmenu
//     */
//     static
//     bool useSidePixmap()
//     {
//       return self()->mUseSidePixmap;
//     }
// 
//     /**
//       Set SideName
//     */
//     static
//     void setSidePixmapName( const QString & v )
//     {
//       if (!self()->isImmutable( QString::fromLatin1( "SidePixmapName" ) ))
//         self()->mSidePixmapName = v;
//     }
// 
//     /**
//       Get SideName
//     */
//     static
//     QString sidePixmapName()
//     {
//       return self()->mSidePixmapName;
//     }
// 
//     /**
//       Set SideTileName
//     */
//     static
//     void setSideTileName( const QString & v )
//     {
//       if (!self()->isImmutable( QString::fromLatin1( "SideTileName" ) ))
//         self()->mSideTileName = v;
//     }
// 
//     /**
//       Get SideTileName
//     */
//     static
//     QString sideTileName()
//     {
//       return self()->mSideTileName;
//     }
// 
//     /**
//       Set Enable icon mouse over effects
//     */
//     static
//     void setShowMouseOverEffects( bool v )
//     {
//       if (!self()->isImmutable( QString::fromLatin1( "ShowMouseOverEffects" ) ))
//         self()->mShowMouseOverEffects = v;
//     }
// 
//     /**
//       Get Enable icon mouse over effects
//     */
//     static
//     bool showMouseOverEffects()
//     {
//       return self()->mShowMouseOverEffects;
//     }
// 
//     /**
//       Set Enable background tiles
//     */
//     static
//     void setEnableTileBackground( bool v )
//     {
//       if (!self()->isImmutable( QString::fromLatin1( "EnableTileBackground" ) ))
//         self()->mEnableTileBackground = v;
//     }
// 
//     /**
//       Get Enable background tiles
//     */
//     static
//     bool enableTileBackground()
//     {
//       return self()->mEnableTileBackground;
//     }
// 
//     static
//     void writeConfig()
//     {
//       static_cast<KConfigSkeleton*>(self())->writeConfig();
//     }
//   protected:
//     KickerSettings(const char *arg);
//     static KickerSettings *mSelf;
// 
// 
//     // General
//     bool mConserveSpace;
//     bool mTransparent;
//     bool mUseBackgroundTheme;
//     bool mColorizeBackground;
//     bool mRotateBackground;
//     QString mBackgroundTheme;
//     int mTintValue;
//     QColor mTintColor;
//     int mUnhideLocation;
//     bool mFadeOutAppletHandles;
//     bool mHideAppletHandles;
//     bool mShowToolTips;
//     QStringList mUntrustedApplets;
//     QStringList mUntrustedExtensions;
// 
//     // menus
//     bool mDetailedMenuEntries;
//     bool mDetailedEntriesNamesFirst;
//     bool mShowMenuTitles;
//     int mMenuEntryHeight;
//     bool mShowHiddenFiles;
//     int mMaxEntries2;
//     bool mUseBookmarks;
//     bool mUseBrowser;
//     QStringList mMenuExtensions;
//     QStringList mRecentAppsStat;
//     int mNumVisibleEntries;
//     bool mRecentVsOften;
// 
//     // button_tiles
//     bool mEnableKMenuTiles;
//     bool mEnableDesktopButtonTiles;
//     bool mEnableURLTiles;
//     bool mEnableBrowserTiles;
//     bool mEnableWindowListTiles;
//     QString mKMenuTile;
//     QColor mKMenuTileColor;
//     QString mDesktopButtonTile;
//     QColor mDesktopButtonTileColor;
//     QString mURLTile;
//     QColor mURLTileColor;
//     QString mBrowserTile;
//     QColor mBrowserTileColor;
// 
//     // KMenu
//     bool mUseSidePixmap;
//     QString mSidePixmapName;
//     QString mSideTileName;
// 
//     // buttons
//     bool mShowMouseOverEffects;
//     bool mEnableTileBackground;
// 
//   private:
// };
// 
// #endif
// 
